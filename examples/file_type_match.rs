/* examples/file_type_match.rs */

use nextjlc::file_type::identify_software;

fn main() {
    // Test data simulating content from a file generated by EasyEDA but also containing the "Altium" keyword.
    // The function should identify "Altium" first based on the defined priority.
    let easyeda_altium_data = r#"
G04 Layer: TopLayer*
G04 EasyEDA v6.5.21, 2022-10-22 22:53:21*
G04 7438d7f193f94c6e85935ac87e7ca7e0,b44f5d1b41c049809bcd4b4b0486c30b,10*
G04 Gerber Generator version 0.2*
G04 Scale: 100 percent, Rotated: No, Reflected: No *
G04 Dimensions in inches *
G04 leading zeros omitted , absolute positions ,3 integer and 6 decimal *G04*
G04 #@! TF.GenerationSoftware,Altium Limited,Altium Designer,22.10.1 (41)*
G04*
G04 Layer_Color=16711935*
%FSLAX25Y25*%
%MOIN*%
G70*
"#;

    // Test data simulating content from a KiCad generated file.
    let kicad_data = r#"
%TF.GenerationSoftware,KiCad,Pcbnew,8.0.6*%
%TF.CreationDate,2024-11-23T19:07:55+08:00*%
%TF.ProjectId,AK4497SEQ,414b3434-3937-4534-9551-2e6b69636164,rev?*%
%TF.SameCoordinates,Original*%
%TF.FileFunction,Soldermask,Bot*%
%TF.FilePolarity,Negative*%
%FSLAX46Y46*%
G04 Gerber Fmt 4.6, Leading zero omitted, Abs format (unit mm)*
G04 Created by KiCad (PCBNEW 8.0.6) date 2024-11-23 19:07:55*
"#;

    // Test data that should not match any software.
    let unknown_data = "This is a generic text file with no software identifiers.";

    println!("--- Identifying Software from File Content ---");

    // --- Test case 1 ---
    println!("\nTesting with EasyEDA/Altium data...");
    match identify_software(easyeda_altium_data) {
        Some(software) => println!("Result: Identified software is '{}'", software),
        None => println!("Result: Could not identify the software."),
    }

    // --- Test case 2 ---
    println!("\nTesting with KiCad data...");
    match identify_software(kicad_data) {
        Some(software) => println!("Result: Identified software is '{}'", software),
        None => println!("Result: Could not identify the software."),
    }

    // --- Test case 3 ---
    println!("\nTesting with unknown data...");
    match identify_software(unknown_data) {
        Some(software) => println!("Result: Identified software is '{}'", software),
        None => println!("Result: Could not identify the software."),
    }
}
